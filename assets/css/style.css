/* universal selector '*' aka 'wild-card' 
used to over-ride some default browser elements */
* {
    margin: 0;
    padding: 0;
    /* this is telling the browser to ignore padding
    in overall width, to help address issue brought in the footer
    re 100% width plus 35px padding */
    box-sizing: border-box;
}

/* applies color and font to whole page */
body {
    color: #39a6b2;
    font-family: Helvetica, Arial, sans-serif;
}

/* apply styles to <header> */
header {
    padding: 20px 35px;
    background-color: #39a6b2;
    /* the application of flexbox will make the <header> (parent element) a row and control the distribution of its content (child elements) on either a horizontal or vertical axis to facilitate dynamic re-sizing; flexbox over-rides block-level behavior */
    display: flex;
    /* the following property applies only to elements using 'flex' or 'grid' values */
    justify-content: space-between;
    flex-wrap: wrap;
}

/* apply specific style to h1 in header */
header h1 {
    font-weight: bold;
    font-size: 36px;
    color: #fce138;
    margin: 0;
}

header a {
    text-decoration: none;
    color: #fce138;    
}

header nav {
    margin: 7px 0;
}

header nav ul li {
    display: inline;
}

header nav ul li a {
    margin: 0 30px;
    font-weight: lighter;
    font-size: 22px;
}

footer {
    background: #fce138;
    width: 100%;
    padding: 40px 35px;
}

footer h2 {
    display: inline;
    color: #024e76;
    font-size: 30px;
    margin: 0;
}

footer div {
    float: right;
    line-height: 1.5;
    text-align: right;
}

footer a {
    color: #024e76;
}

section {
    padding: 60px;
}

/* the "." notation indicates class as our CSS selector. Note also, we are using
    the relative URL path to select the background image. */
.hero {
    background-image: url("../images/hero-bg.jpg");
    height: 600px;
    background-size: cover;
    background-position: center;
    position: relative;
}

/* the following attributes could be used successfully to override those in the above .hero, however, for the sake of demonstrating a different option, we will be creating a seperate stylesheet.
.hero-secondary {
    background-color: black;
    color: red;
} */

.hero-form {
    color: #024e76;
    background-color: #fce138;
    padding: 20px;
    width: 500px;
    /* shorthand property to allow border style, width and color all in one line, 
        which would otherwise be denoted individually as "border-style" "border-width"
        and "border-color" */
    border: solid 3px #024e76;
    position: absolute;
    bottom: 120px;
    right: 140px;
}

.hero-form h3 {
    font-size: 24px;
    margin: 0;
}

.hero-form p {
    margin: 5px 0 15px 0;
}

.form-input {
    border: solid 1px c#024e76;
    display: block;
    padding: 7px 15px;
    font-size: 16px;
    color: #024e76;
    width: 100%;
    margin-bottom: 15px;
}

.hero-form label {
    margin: 0 5px;
}

.hero-form button {
    background-color: #024e76;
    color: #fce138;
    padding: 10px 20px;
    font-size: 16px;
    border: none;
}

.intro {
    text-align: center;
}

.intro p {
    line-height: 1.7;
    color: #39a6b2;
    width: 80%;
    font-size: 20px;
    margin: 0 auto;
    /* margin attribute is added here in order to resolve the off-set centering of text brought about by
        the 80% block element; 'auto' will tell the browser to calculate the margins, making them roughly even. 
        This works only for horizontally applied 'auto' - will not work on the vertical. */
}

.section-title {
    font-size: 55px;
    color: #024e76;
    margin-bottom: 35px;
    padding: 0 100px 20px 100px;
    border-bottom: 3px solid;
    /* the following value produces an in-line element, padding and similar attricutes behave as they would with block.*/
    display: inline-block;
}

.primary-border {
    border-bottom-color: #fce138;
}

.secondary-border {
    border-bottom-color: #39a6b2;
}

.steps {
    text-align: center;
    background: #fce138;
}

.steps div {
    margin-bottom: 80px;
}

.steps img {
    width: 15%;
    margin: 10px 0;
}

.steps h3 {
    color: #024e76;
    font-size: 46px;
    margin-top: 10px;
}

.steps p {
    color: #39a6b2;
    font-size: 23px;    
}

.steps span {
    font-size: 38px;
}

.trainers {
    text-align: center;
}

.trainer {
    width: 900px;
    margin: 0 auto 30px auto;
    background: #024e76;
    color: #fce138;
    /* The following 'overflow' attribute provides "block formatting context" to the containing article element
        to help deal with the effects of using 'float' for the trainer bio and img. 'Overflow' essentially
        alerted the containing element that there is content inside that needs to be accounted for. */
    overflow: auto;
}

.trainer img {
    width: 35%;
    float: left;
}

.trainer-bio {
    padding: 35px;
    float: left;
    width: 65%;
}

/* The following two classes are referred to as "utility classes" because they are not specific to any part
    of the HTML doc and they do only one thing; they can in this case be applied anywhere on the page needing
    a text-align fix.*/
.text-left {
    text-align: left;
}

.trainer-bio h3 {
    font-size: 32px;
    margin-bottom: 8px;
}

.trainer-bio h4 {
    font-weight: lighter;
    font-size: 26px;
    margin-bottom: 25px;
}

.trainer-bio p {
    font-size: 17px;
    line-height: 1.3;
}

.text-right {
    text-align: right;
}

.contact {
    text-align: center;
    background-color: #024e76;
    margin-bottom: 3px solid #39a6b2;
}

.contact h2 {
    color: #fce138;
}

/* By using a "class selector" here, instead of a "type selector" (which is what we would have it we targeted only 
    the iframe) we avoid a situation where styling is being applied to unintended targets, should additional iframes
    be used on other pages referenced by this style sheet. */
.contact-info iframe {
    width: 400px;
    height: 400px;
}

.contact-info div {
    width: 410px;
    /* this allows the 'contact-info' container to sit on the same row as the <iframe> element and allows us to
        assign a width, which the 'inline' property would not let us do. */
    display: inline-block;
    /* The content of the <div> would naturally rest at the bottom, so this property centers this content 
        vertically within its container. */
    vertical-align: top;
    text-align: left;
    margin: 30px 0 0 60px;
    color: white;
}

.contact-info h3 {
    color: #fce138;
    font-size: 32px;
}

/* the following rules target two different elements. */
.contact-info p, .contact-info address {
    margin: 20px 0;
    line-height: 1.5;
    font-size: 20px;
    font-style: normal;
}

.contact-info a {
    color: #fce138;
}